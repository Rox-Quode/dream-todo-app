import Head from 'next/head';
import { authOptions } from "pages/api/auth/[...nextauth]";
import { getServerSession } from "next-auth/next";
import { TodoRow } from '../components/TodoRow';
import { AddItem } from '../components/Additem';
import { LogoutButton } from '../components/LogoutButton';
import { useRouter } from "next/router";
import clientPromise from "@/lib/mongodb";


export async function getServerSideProps(context) {
   // 1st we need to fetch a session
   const session = await getServerSession(
    context.req,
    context.res,
    authOptions
  );
    // after checking if we have a session, if we don't, redirect user to home page
    if (!session) {
        return {
          redirect: {
            destination: "/",
            permanent: false,
          },
        };
    }

    const client = await clientPromise;
    const dbResult = await client
      .db("test")
      .collection("users")
      .findOne({ email: session.user.email }, { projection: { todos: 1 } });

    return { props: { todos: dbResult.todos ?? [] } };
}

  
export default function Dashboard({ todos }) {
  const router = useRouter();
  const refreshData = () => {
    router.replace(router.asPath);
  };

  return (
    <>
      <Head>
        <title>Dream Life To-Do App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>                         
        <main className="bg-zinc-200">
            <div className="container mx-auto flex flex-col p-6 min-h-[100vh] gap-y-6 max-w-4xl">
                <div className="sm:flex sm:flex-col md:flex md:flex-row justify-between text-center">
                    <div className="text-5xl font-bold text-slate-700 xs:mb-8 md:mb-0">
                        Your Dream To-dos ðŸŒ 
                    </div>
                    <div className="xs:flex xs:justify-center">
                    <LogoutButton />
                    </div>    
                </div>
                <AddItem refreshData={refreshData} />
                <div className="overflow-hidden overflow-x-auto rounded-lg border border-violet-900">
                    <table className="table-auto min-w-full divide-y divide-violet-900 text-sm">
                        <thead className="bg-gray-100">
                        <tr>
                            <th className="whitespace-nowrap px-4 py-2 text-left font-medium text-lg text-gray-900">
                            ðŸ“• Description
                            </th>
                            <th className="whitespace-nowrap px-4 py-2 text-left font-medium text-lg text-gray-900">
                            ðŸ”¥ Priority
                            </th>
                            <th className="whitespace-nowrap px-4 py-2 text-left font-medium text-lg text-gray-900">
                            ðŸ—“ Due
                            </th>
                        </tr>
                        </thead>
                        <tbody className="divide-y divide-violet-800">
                            {todos.map((todo) => (
                                <TodoRow key={todo.id} todo={todo} refreshData={refreshData} />
                            ))}
                        </tbody>
                    </table>
                </div>
                <div>
                    <div className="text-2xl">Status</div>
                    <div>You have {todos.length} to-dos on your list!</div>
                </div>
            </div>
        </main>
    </>
  );
}
